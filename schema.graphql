# source: http://localhost:3000/api/markers
# timestamp: Fri Mar 09 2018 08:12:28 GMT+0100 (CET)

schema {
  query: Root
  mutation: Mutation
}

input CreateMarkerInput {
  latitude: Float!
  longitude: Float!
  type: MarkerType
  clientMutationId: String
}

type CreateMarkerPayload {
  markerEdge: MarkerEdge
  clientMutationId: String
}

type geo {
  latitude: Float
  longitude: Float
}

type Marker implements Node {
  id: ID!
  createdAt: String
  userId: ID
  type: MarkerType
  geoJson: geo
  hashKey: String
  geoHash: String
}

"""A connection to a list of items."""
type MarkerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MarkerEdge]
}

"""An edge in a connection."""
type MarkerEdge {
  """The item at the end of the edge"""
  node: Marker

  """A cursor for use in pagination"""
  cursor: String!
}

enum MarkerType {
  CHIMNEY_SMOKE
  DOG_POOP
  ILLEGAL_PARKING
}

type Mutation {
  createMarker(input: CreateMarkerInput!): CreateMarkerPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

input QueryRadius {
  radius: Int
  latitude: Float
  longitude: Float
}

type Root {
  markers(userId: ID, type: MarkerType, location: QueryRadius, after: String, first: Int, before: String, last: Int): MarkerConnection

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}
