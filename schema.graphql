# source: http://localhost:3000/api/q
# timestamp: Thu Mar 29 2018 18:20:28 GMT+0200 (CEST)

schema {
  query: Root
  mutation: Mutation
}

input CreateMarkerInput {
  latitude: Float!
  longitude: Float!
  type: String
  clientMutationId: String
}

type CreateMarkerPayload {
  markerEdge: MarkerEdge
  clientMutationId: String
}

type geo {
  latitude: Float
  longitude: Float
}

type Marker implements Node {
  id: ID!
  createdAt: String
  user: User
  type: String
  geoJson: geo
  hashKey: String
  geoHash: String
  reportId: String
}

"""A connection to a list of items."""
type MarkerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MarkerEdge]
}

"""An edge in a connection."""
type MarkerEdge {
  """The item at the end of the edge"""
  node: Marker

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  createMarker(input: CreateMarkerInput!): CreateMarkerPayload
  updateOrCreateUser(input: UpdateOrCreateUserInput!): UpdateOrCreateUserPayload
  updateMarker(input: UpdateMarkerInput!): UpdateMarkerPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

input QueryRadius {
  radius: Int
  latitude: Float
  longitude: Float
}

type Report {
  id: ID
  status: String
  type: String
  geoJson: geo
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type ReportConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReportEdge]
}

"""An edge in a connection."""
type ReportEdge {
  """The item at the end of the edge"""
  node: Report

  """A cursor for use in pagination"""
  cursor: String!
}

type Root {
  markers(userId: ID, types: [String], location: QueryRadius, after: String, first: Int, before: String, last: Int): MarkerConnection
  reports(location: QueryRadius, types: [String], after: String, first: Int, before: String, last: Int): ReportConnection

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

input UpdateMarkerInput {
  id: ID
  clientMutationId: String
}

type UpdateMarkerPayload {
  markerEdge: MarkerEdge
  clientMutationId: String
}

input UpdateOrCreateUserInput {
  registrationToken: String
  clientMutationId: String
}

type UpdateOrCreateUserPayload {
  user: User
  clientMutationId: String
}

type User {
  userId: ID
  registrationToken: String
}
